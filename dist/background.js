var i={debug:(r,...e)=>{},info:(r,...e)=>{console.log(r,...e)},warn:(r,...e)=>{console.warn(r,...e)},error:(r,...e)=>{console.error(r,...e)}};var s=class{constructor(){this.config={cachedPspConfig:null,exemptDomainsRegex:null,tabPsps:new Map,detectedPsp:null,currentTabId:null};this.defaultIcons={16:"images/default_16.png",48:"images/default_48.png",128:"images/default_128.png"};this.initializeListeners(),this.loadExemptDomains()}initializeListeners(){chrome.runtime.onMessage.addListener((e,t,n)=>(this.handleMessage(e,t,n),!0)),chrome.tabs.onActivated.addListener(async e=>{await this.handleTabActivation(e)}),chrome.tabs.onUpdated.addListener((e,t,n)=>{this.handleTabUpdate(e,t,n)})}async loadExemptDomains(){try{let t=await(await fetch(chrome.runtime.getURL("exempt-domains.json"))).json(),n=Array.isArray(t.exemptDomains)?t.exemptDomains.join("|"):"";this.config.exemptDomainsRegex=new RegExp(`^https://(?!.*(${n}))`)}catch(e){i.error("Failed to load exempt domains:",e),this.config.exemptDomainsRegex=null}}async handleMessage(e,t,n){try{switch(e.action){case"getPspConfig":await this.handleGetPspConfig(n);break;case"detectPsp":this.handleDetectPsp(e.data,n);break;case"getPsp":this.handleGetPsp(n);break;case"getTabId":t.tab?.id&&n({tabId:t.tab.id});break;case"getExemptDomainsRegex":n({regex:this.config.exemptDomainsRegex?.source});break;default:i.warn("Unknown message action:",e.action),n(null)}}catch(o){i.error("Error handling message:",o),n(null)}}async handleGetPspConfig(e){if(this.config.cachedPspConfig){e({config:this.config.cachedPspConfig});return}try{let t=await fetch(chrome.runtime.getURL("psp-config.json"));this.config.cachedPspConfig=await t.json(),e({config:this.config.cachedPspConfig})}catch(t){i.error("Failed to load PSP config:",t),e(null)}}handleDetectPsp(e,t){e?.psp&&this.config.currentTabId!==null?(this.config.detectedPsp=e.psp,e.tabId===this.config.currentTabId&&(this.config.tabPsps.set(this.config.currentTabId,e.psp),this.updateIcon(e.psp))):this.resetIcon(),t(null)}handleGetPsp(e){let t=this.config.currentTabId?this.config.detectedPsp||this.config.tabPsps.get(this.config.currentTabId):null;e({psp:t})}async handleTabActivation(e){this.config.currentTabId=e.tabId,this.config.detectedPsp=this.config.tabPsps.get(e.tabId)||null;try{let t=await chrome.tabs.get(e.tabId);this.config.detectedPsp?this.updateIcon(this.config.detectedPsp):(this.resetIcon(),t?.url&&this.config.exemptDomainsRegex?.test(t.url)&&await this.injectContentScript(e.tabId))}catch(t){i.warn("Tab access error:",t),this.resetIcon()}}handleTabUpdate(e,t,n){t.status==="loading"&&(this.resetIcon(),this.config.tabPsps.delete(e)),t.status==="complete"&&n.url&&this.config.exemptDomainsRegex?.test(n.url)&&this.injectContentScript(e)}updateIcon(e){let t=this.getPspInfo(e);t&&chrome.action.setIcon({path:{16:`images/${t.image}_16.png`,48:`images/${t.image}_48.png`,128:`images/${t.image}_128.png`}})}resetIcon(){chrome.action.setIcon({path:this.defaultIcons})}getPspInfo(e){return this.config.cachedPspConfig?.psps&&this.config.cachedPspConfig.psps.find(t=>t.name===e)||null}async injectContentScript(e){try{await chrome.scripting.executeScript({target:{tabId:e},files:["content.js"]})}catch(t){i.error(`Failed to inject content script into tab ${e}:`,t)}}};new s;
//# sourceMappingURL=background.js.map
