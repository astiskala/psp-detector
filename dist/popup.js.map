{
  "version": 3,
  "sources": ["../src/lib/utils.ts", "../src/services/ui.ts", "../src/popup.ts"],
  "sourcesContent": ["/**\n * Debounce function to limit the rate at which a function can fire\n * @param func - The function to debounce\n * @param wait - The number of milliseconds to wait\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>): void => {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Create a safe URL by sanitizing the input\n * @param url - The URL to sanitize\n */\nexport function createSafeUrl(url: string): string {\n  try {\n    return new URL(url).toString();\n  } catch (e) {\n    console.error(\"Invalid URL:\", e);\n    return \"#\";\n  }\n}\n\n/**\n * Safely compile a regex pattern\n * @param pattern - The regex pattern to compile\n */\nexport function safeCompileRegex(pattern: string): RegExp | null {\n  try {\n    return new RegExp(pattern, \"i\");\n  } catch (error) {\n    console.error(`Invalid regex pattern: ${pattern}`, error);\n    return null;\n  }\n}\n\n/**\n * Check if a URL should be excluded from PSP detection\n * @param url - The URL to check\n * @param exemptPattern - The pattern of exempt domains\n */\nexport function isUrlExempt(url: string, exemptPattern: RegExp): boolean {\n  try {\n    return !exemptPattern.test(url);\n  } catch (error) {\n    console.error(\"Error checking URL exemption:\", error);\n    return true;\n  }\n}\n\n/**\n * Create error with context for better debugging\n * @param message - Error message\n * @param context - Additional context for the error\n */\nexport function createContextError(\n  message: string,\n  context?: Record<string, unknown>,\n): Error {\n  const error = new Error(message);\n  if (context) {\n    Object.assign(error, { context });\n  }\n  return error;\n}\n\n/**\n * Logger utility with different log levels\n */\nexport const logger = {\n  debug: (message: string, ...args: any[]): void => {\n    if (process.env.NODE_ENV === \"development\") {\n      console.debug(message, ...args);\n    }\n  },\n  info: (message: string, ...args: any[]): void => {\n    console.log(message, ...args);\n  },\n  warn: (message: string, ...args: any[]): void => {\n    console.warn(message, ...args);\n  },\n  error: (message: string, ...args: any[]): void => {\n    console.error(message, ...args);\n  },\n};\n", "import type { PSP } from \"../types\";\nimport { createSafeUrl, logger } from \"../lib/utils\";\n\n/**\n * UI service for updating the popup with PSP information.\n * @class\n */\nexport class UIService {\n  private elements: Record<string, HTMLElement>;\n\n  constructor() {\n    this.elements = {};\n    this.initializeDOMElements();\n  }\n\n  /**\n   * Initialize DOM element references\n   * @private\n   * @return {void}\n   */\n  private initializeDOMElements(): void {\n    const elementIds = [\"name\", \"description\", \"notice\", \"url\", \"image\"];\n    elementIds.forEach((id) => {\n      const element = document.getElementById(`psp-${id}`);\n      if (!element) {\n        throw new Error(`Element psp-${id} not found`);\n      }\n      this.elements[id] = element;\n    });\n  }\n\n  /**\n   * Update UI with PSP information\n   * @param {PSP} psp - PSP configuration object\n   * @return {void}\n   */\n  public updatePSPDisplay(psp: PSP): void {\n    try {\n      this.updateTextContent(\"name\", psp.name);\n      this.updateTextContent(\"description\", psp.summary);\n      this.updateNoticeSection(psp.notice);\n      this.updateLearnMoreLink(psp.url);\n      this.updateImage(psp.image, psp.name);\n    } catch (error) {\n      logger.error(\"Failed to update PSP display:\", error);\n      this.showError();\n    }\n  }\n\n  /**\n   * Show no PSP detected state\n   * @return {void}\n   */\n  public showNoPSPDetected(): void {\n    this.updateTextContent(\"name\", \"No PSP detected\");\n    this.updateTextContent(\n      \"description\",\n      \"The Payment Service Provider could not be determined. Please ensure you have navigated to the website's checkout page.\",\n    );\n    this.elements.notice.style.display = \"none\";\n    this.updateTextContent(\"notice\", \"\");\n    this.updateLearnMoreLink(\n      \"mailto:psp-detector@adamstiskala.com\",\n      \"Suggest Improvement\",\n    );\n    this.updateImage(\"default\", \"No PSP detected\");\n  }\n\n  /**\n   * Show error state\n   * @return {void}\n   */\n  public showError(): void {\n    this.updateTextContent(\"name\", \"Error\");\n    this.updateTextContent(\n      \"description\",\n      \"An error occurred while loading PSP information. Please try again later.\",\n    );\n    this.elements.notice.style.display = \"none\";\n    this.updateImage(\"default\", \"Error\");\n  }\n\n  /**\n   * Update text content of an element\n   * @private\n   * @param {string} elementId - Element ID\n   * @param {string} content - Text content\n   * @return {void}\n   */\n  private updateTextContent(elementId: string, content: string): void {\n    if (this.elements[elementId]) {\n      this.elements[elementId].textContent = content;\n    }\n  }\n\n  /**\n   * Update notice section visibility and content\n   * @private\n   * @param {string} [notice] - Notice text\n   * @return {void}\n   */\n  private updateNoticeSection(notice?: string): void {\n    if (notice) {\n      this.elements.notice.style.display = \"block\";\n      this.updateTextContent(\"notice\", notice);\n    } else {\n      this.elements.notice.style.display = \"none\";\n      this.updateTextContent(\"notice\", \"\");\n    }\n  }\n\n  /**\n   * Update learn more link\n   * @private\n   * @param {string} url - URL for the link\n   * @param {string} [text='Learn More'] - Link text\n   * @return {void}\n   */\n  private updateLearnMoreLink(url: string, text = \"Learn More\"): void {\n    const anchor = document.createElement(\"a\");\n    anchor.href = createSafeUrl(url);\n    anchor.textContent = text;\n    anchor.target = \"_blank\";\n    anchor.rel = \"noopener noreferrer\";\n    this.elements.url.replaceChildren(anchor);\n  }\n\n  /**\n   * Update PSP image\n   * @private\n   * @param {string} image - Image name\n   * @param {string} alt - Alt text\n   * @return {void}\n   */\n  private updateImage(image: string, alt: string): void {\n    const imgElement = this.elements.image as HTMLImageElement;\n    imgElement.src = chrome.runtime.getURL(`images/${image}_128.png`);\n    imgElement.alt = `${alt} logo`;\n  }\n}\n", "/**\n * Popup manager for PSP Detector Chrome Extension.\n * Handles UI updates and communication with background script.\n * @module popup\n */\nimport { MessageAction } from \"./types\";\nimport { UIService } from \"./services/ui\";\nimport { logger } from \"./lib/utils\";\n\nclass PopupManager {\n  private ui: UIService;\n\n  constructor() {\n    this.ui = new UIService();\n  }\n\n  /**\n   * Initialize the popup\n   * @return {Promise<void>}\n   */\n  public async initialize(): Promise<void> {\n    try {\n      const detectedPsp = await this.getDetectedPSP();\n      if (!detectedPsp) {\n        this.ui.showNoPSPDetected();\n        return;\n      }\n      const pspConfig = await this.getPSPConfig();\n      const psp = pspConfig.psps.find(\n        (p: { name: string }) => p.name === detectedPsp,\n      );\n      if (psp) {\n        this.ui.updatePSPDisplay(psp);\n      } else {\n        logger.error(\"PSP config not found for:\", detectedPsp);\n        this.ui.showNoPSPDetected();\n      }\n    } catch (error) {\n      logger.error(\"Failed to initialize popup:\", error);\n      this.ui.showError();\n    }\n  }\n\n  /**\n   * Get the detected PSP from the background script\n   * @private\n   * @return {Promise<string|null>} PSP name or null\n   */\n  private async getDetectedPSP(): Promise<string | null> {\n    try {\n      const response = await this.sendMessage<{ psp: string | null }>({\n        action: MessageAction.GET_PSP,\n      });\n      return response.psp;\n    } catch (error) {\n      logger.error(\"Failed to get detected PSP:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Get PSP configuration from extension resource\n   * @private\n   * @return {Promise<any>} PSP config object\n   */\n  private async getPSPConfig(): Promise<any> {\n    const response = await fetch(chrome.runtime.getURL(\"psp-config.json\"));\n    if (!response.ok) {\n      throw new Error(`Failed to fetch PSP config: ${response.status}`);\n    }\n    return response.json();\n  }\n\n  /**\n   * Send a message to the background script\n   * @private\n   * @template T\n   * @param {object} message - Message to send\n   * @return {Promise<T>} Response from background\n   */\n  private sendMessage<T>(message: { action: MessageAction }): Promise<T> {\n    return new Promise((resolve, reject) => {\n      try {\n        chrome.runtime.sendMessage(message, (response) => {\n          if (chrome.runtime.lastError) {\n            reject(chrome.runtime.lastError);\n          } else {\n            resolve(response);\n          }\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n// Initialize popup\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const popup = new PopupManager();\n  popup.initialize().catch((error) => {\n    logger.error(\"Popup initialization failed:\", error);\n  });\n});\n"],
  "mappings": "AA6BO,SAASA,EAAcC,EAAqB,CACjD,GAAI,CACF,OAAO,IAAI,IAAIA,CAAG,EAAE,SAAS,CAC/B,OAAS,EAAG,CACV,eAAQ,MAAM,eAAgB,CAAC,EACxB,GACT,CACF,CAgDO,IAAMC,EAAS,CACpB,MAAO,CAACC,KAAoBC,IAAsB,CAIlD,EACA,KAAM,CAACD,KAAoBC,IAAsB,CAC/C,QAAQ,IAAID,EAAS,GAAGC,CAAI,CAC9B,EACA,KAAM,CAACD,KAAoBC,IAAsB,CAC/C,QAAQ,KAAKD,EAAS,GAAGC,CAAI,CAC/B,EACA,MAAO,CAACD,KAAoBC,IAAsB,CAChD,QAAQ,MAAMD,EAAS,GAAGC,CAAI,CAChC,CACF,EC5FO,IAAMC,EAAN,KAAgB,CAGrB,aAAc,CACZ,KAAK,SAAW,CAAC,EACjB,KAAK,sBAAsB,CAC7B,CAOQ,uBAA8B,CACjB,CAAC,OAAQ,cAAe,SAAU,MAAO,OAAO,EACxD,QAASC,GAAO,CACzB,IAAMC,EAAU,SAAS,eAAe,OAAOD,CAAE,EAAE,EACnD,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,eAAeD,CAAE,YAAY,EAE/C,KAAK,SAASA,CAAE,EAAIC,CACtB,CAAC,CACH,CAOO,iBAAiBC,EAAgB,CACtC,GAAI,CACF,KAAK,kBAAkB,OAAQA,EAAI,IAAI,EACvC,KAAK,kBAAkB,cAAeA,EAAI,OAAO,EACjD,KAAK,oBAAoBA,EAAI,MAAM,EACnC,KAAK,oBAAoBA,EAAI,GAAG,EAChC,KAAK,YAAYA,EAAI,MAAOA,EAAI,IAAI,CACtC,OAASC,EAAO,CACdC,EAAO,MAAM,gCAAiCD,CAAK,EACnD,KAAK,UAAU,CACjB,CACF,CAMO,mBAA0B,CAC/B,KAAK,kBAAkB,OAAQ,iBAAiB,EAChD,KAAK,kBACH,cACA,wHACF,EACA,KAAK,SAAS,OAAO,MAAM,QAAU,OACrC,KAAK,kBAAkB,SAAU,EAAE,EACnC,KAAK,oBACH,uCACA,qBACF,EACA,KAAK,YAAY,UAAW,iBAAiB,CAC/C,CAMO,WAAkB,CACvB,KAAK,kBAAkB,OAAQ,OAAO,EACtC,KAAK,kBACH,cACA,0EACF,EACA,KAAK,SAAS,OAAO,MAAM,QAAU,OACrC,KAAK,YAAY,UAAW,OAAO,CACrC,CASQ,kBAAkBE,EAAmBC,EAAuB,CAC9D,KAAK,SAASD,CAAS,IACzB,KAAK,SAASA,CAAS,EAAE,YAAcC,EAE3C,CAQQ,oBAAoBC,EAAuB,CAC7CA,GACF,KAAK,SAAS,OAAO,MAAM,QAAU,QACrC,KAAK,kBAAkB,SAAUA,CAAM,IAEvC,KAAK,SAAS,OAAO,MAAM,QAAU,OACrC,KAAK,kBAAkB,SAAU,EAAE,EAEvC,CASQ,oBAAoBC,EAAaC,EAAO,aAAoB,CAClE,IAAMC,EAAS,SAAS,cAAc,GAAG,EACzCA,EAAO,KAAOC,EAAcH,CAAG,EAC/BE,EAAO,YAAcD,EACrBC,EAAO,OAAS,SAChBA,EAAO,IAAM,sBACb,KAAK,SAAS,IAAI,gBAAgBA,CAAM,CAC1C,CASQ,YAAYE,EAAeC,EAAmB,CACpD,IAAMC,EAAa,KAAK,SAAS,MACjCA,EAAW,IAAM,OAAO,QAAQ,OAAO,UAAUF,CAAK,UAAU,EAChEE,EAAW,IAAM,GAAGD,CAAG,OACzB,CACF,EClIA,IAAME,EAAN,KAAmB,CAGjB,aAAc,CACZ,KAAK,GAAK,IAAIC,CAChB,CAMA,MAAa,YAA4B,CACvC,GAAI,CACF,IAAMC,EAAc,MAAM,KAAK,eAAe,EAC9C,GAAI,CAACA,EAAa,CAChB,KAAK,GAAG,kBAAkB,EAC1B,MACF,CAEA,IAAMC,GADY,MAAM,KAAK,aAAa,GACpB,KAAK,KACxBC,GAAwBA,EAAE,OAASF,CACtC,EACIC,EACF,KAAK,GAAG,iBAAiBA,CAAG,GAE5BE,EAAO,MAAM,4BAA6BH,CAAW,EACrD,KAAK,GAAG,kBAAkB,EAE9B,OAASI,EAAO,CACdD,EAAO,MAAM,8BAA+BC,CAAK,EACjD,KAAK,GAAG,UAAU,CACpB,CACF,CAOA,MAAc,gBAAyC,CACrD,GAAI,CAIF,OAHiB,MAAM,KAAK,YAAoC,CAC9D,eACF,CAAC,GACe,GAClB,OAASA,EAAO,CACd,OAAAD,EAAO,MAAM,8BAA+BC,CAAK,EAC1C,IACT,CACF,CAOA,MAAc,cAA6B,CACzC,IAAMC,EAAW,MAAM,MAAM,OAAO,QAAQ,OAAO,iBAAiB,CAAC,EACrE,GAAI,CAACA,EAAS,GACZ,MAAM,IAAI,MAAM,+BAA+BA,EAAS,MAAM,EAAE,EAElE,OAAOA,EAAS,KAAK,CACvB,CASQ,YAAeC,EAAgD,CACrE,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,GAAI,CACF,OAAO,QAAQ,YAAYF,EAAUD,GAAa,CAC5C,OAAO,QAAQ,UACjBG,EAAO,OAAO,QAAQ,SAAS,EAE/BD,EAAQF,CAAQ,CAEpB,CAAC,CACH,OAASD,EAAO,CACdI,EAAOJ,CAAK,CACd,CACF,CAAC,CACH,CACF,EAIA,SAAS,iBAAiB,mBAAoB,IAAM,CACpC,IAAIN,EAAa,EACzB,WAAW,EAAE,MAAOM,GAAU,CAClCD,EAAO,MAAM,+BAAgCC,CAAK,CACpD,CAAC,CACH,CAAC",
  "names": ["createSafeUrl", "url", "logger", "message", "args", "UIService", "id", "element", "psp", "error", "logger", "elementId", "content", "notice", "url", "text", "anchor", "createSafeUrl", "image", "alt", "imgElement", "PopupManager", "UIService", "detectedPsp", "psp", "p", "logger", "error", "response", "message", "resolve", "reject"]
}
