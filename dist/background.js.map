{
  "version": 3,
  "sources": ["../src/lib/utils.ts", "../src/background.ts"],
  "sourcesContent": ["/**\n * Debounce function to limit the rate at which a function can fire\n * @param func - The function to debounce\n * @param wait - The number of milliseconds to wait\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>): void => {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Create a safe URL by sanitizing the input\n * @param url - The URL to sanitize\n */\nexport function createSafeUrl(url: string): string {\n  try {\n    return new URL(url).toString();\n  } catch (e) {\n    console.error(\"Invalid URL:\", e);\n    return \"#\";\n  }\n}\n\n/**\n * Safely compile a regex pattern\n * @param pattern - The regex pattern to compile\n */\nexport function safeCompileRegex(pattern: string): RegExp | null {\n  try {\n    return new RegExp(pattern, \"i\");\n  } catch (error) {\n    console.error(`Invalid regex pattern: ${pattern}`, error);\n    return null;\n  }\n}\n\n/**\n * Check if a URL should be excluded from PSP detection\n * @param url - The URL to check\n * @param exemptPattern - The pattern of exempt domains\n */\nexport function isUrlExempt(url: string, exemptPattern: RegExp): boolean {\n  try {\n    return !exemptPattern.test(url);\n  } catch (error) {\n    console.error(\"Error checking URL exemption:\", error);\n    return true;\n  }\n}\n\n/**\n * Create error with context for better debugging\n * @param message - Error message\n * @param context - Additional context for the error\n */\nexport function createContextError(\n  message: string,\n  context?: Record<string, unknown>,\n): Error {\n  const error = new Error(message);\n  if (context) {\n    Object.assign(error, { context });\n  }\n  return error;\n}\n\n/**\n * Logger utility with different log levels\n */\nexport const logger = {\n  debug: (message: string, ...args: any[]): void => {\n    if (process.env.NODE_ENV === \"development\") {\n      console.debug(message, ...args);\n    }\n  },\n  info: (message: string, ...args: any[]): void => {\n    console.log(message, ...args);\n  },\n  warn: (message: string, ...args: any[]): void => {\n    console.warn(message, ...args);\n  },\n  error: (message: string, ...args: any[]): void => {\n    console.error(message, ...args);\n  },\n};\n", "/**\n * Background service for PSP Detector Chrome Extension.\n * Handles messaging, tab events, icon updates, and content script injection.\n * @module background\n */\nimport { MessageAction, PSP } from \"./types\";\nimport { logger } from \"./lib/utils\";\nimport type { BackgroundConfig } from \"./types/background\";\n\nclass BackgroundService {\n  /**\n   * Extension state/configuration\n   * @type {BackgroundConfig}\n   */\n  config: {\n    cachedPspConfig: any;\n    exemptDomainsRegex: RegExp | null;\n    tabPsps: Map<any, any>;\n    detectedPsp: any;\n    currentTabId: number | null;\n  } = {\n    cachedPspConfig: null,\n    exemptDomainsRegex: null,\n    tabPsps: new Map(),\n    detectedPsp: null,\n    currentTabId: null,\n  };\n\n  /**\n   * Default icon paths\n   */\n  defaultIcons = {\n    16: \"images/default_16.png\",\n    48: \"images/default_48.png\",\n    128: \"images/default_128.png\",\n  };\n\n  constructor() {\n    this.initializeListeners();\n    this.loadExemptDomains();\n  }\n\n  /**\n   * Initialize all extension message and tab listeners\n   * @private\n   * @return {void}\n   */\n  initializeListeners(): void {\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      this.handleMessage(message, sender, sendResponse);\n      return true; // Keep message channel open for async response\n    });\n\n    chrome.tabs.onActivated.addListener(async (activeInfo) => {\n      await this.handleTabActivation(activeInfo);\n    });\n\n    chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n      this.handleTabUpdate(tabId, changeInfo, tab);\n    });\n  }\n\n  /**\n   * Load exempt domains configuration from extension resource\n   * @private\n   * @return {Promise<void>}\n   */\n  async loadExemptDomains(): Promise<void> {\n    try {\n      const response = await fetch(\n        chrome.runtime.getURL(\"exempt-domains.json\"),\n      );\n      const data = await response.json();\n      const domainPattern = Array.isArray(data.exemptDomains)\n        ? data.exemptDomains.join(\"|\")\n        : \"\";\n      this.config.exemptDomainsRegex = new RegExp(\n        `^https://(?!.*(${domainPattern}))`,\n      );\n    } catch (error) {\n      logger.error(\"Failed to load exempt domains:\", error);\n      this.config.exemptDomainsRegex = null;\n    }\n  }\n\n  /**\n   * Handle incoming extension messages\n   * @private\n   * @param {object} message - Message object\n   * @param {chrome.runtime.MessageSender} sender - Sender\n   * @param {function} sendResponse - Response callback\n   * @return {Promise<void>}\n   */\n  async handleMessage(\n    message: any,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void,\n  ): Promise<void> {\n    try {\n      switch (message.action) {\n        case MessageAction.GET_PSP_CONFIG:\n          await this.handleGetPspConfig(sendResponse);\n          break;\n        case MessageAction.DETECT_PSP:\n          this.handleDetectPsp(message.data, sendResponse);\n          break;\n        case MessageAction.GET_PSP:\n          this.handleGetPsp(sendResponse);\n          break;\n        case MessageAction.GET_TAB_ID:\n          if (sender.tab?.id) {\n            sendResponse({ tabId: sender.tab.id });\n          }\n          break;\n        case MessageAction.GET_EXEMPT_DOMAINS_REGEX:\n          sendResponse({ regex: this.config.exemptDomainsRegex?.source });\n          break;\n        default:\n          logger.warn(\"Unknown message action:\", message.action);\n          sendResponse(null);\n      }\n    } catch (error) {\n      logger.error(\"Error handling message:\", error);\n      sendResponse(null);\n    }\n  }\n\n  /**\n   * Handle PSP configuration request\n   * @private\n   * @param {function} sendResponse - Response callback\n   * @return {Promise<void>}\n   */\n  async handleGetPspConfig(\n    sendResponse: (response?: { config: any } | null) => void,\n  ): Promise<void> {\n    if (this.config.cachedPspConfig) {\n      sendResponse({ config: this.config.cachedPspConfig });\n      return;\n    }\n    try {\n      const response: Response = await fetch(\n        chrome.runtime.getURL(\"psp-config.json\"),\n      );\n      this.config.cachedPspConfig = await response.json();\n      sendResponse({ config: this.config.cachedPspConfig });\n    } catch (error) {\n      logger.error(\"Failed to load PSP config:\", error);\n      sendResponse(null);\n    }\n  }\n\n  /**\n   * Handle PSP detection\n   * @private\n   * @param {object} data - Detection data\n   * @param {function} sendResponse - Response callback\n   * @return {void}\n   */\n  handleDetectPsp(\n    data: { psp?: string; tabId?: number },\n    sendResponse: (response?: any) => void,\n  ): void {\n    if (data?.psp && this.config.currentTabId !== null) {\n      this.config.detectedPsp = data.psp;\n      if (data.tabId === this.config.currentTabId) {\n        this.config.tabPsps.set(this.config.currentTabId, data.psp);\n        this.updateIcon(data.psp);\n      }\n    } else {\n      this.resetIcon();\n    }\n    sendResponse(null);\n  }\n\n  /**\n   * Handle get PSP request\n   * @private\n   * @param {function} sendResponse - Response callback\n   * @return {void}\n   */\n  handleGetPsp(sendResponse: (response?: any) => void): void {\n    const psp = this.config.currentTabId\n      ? this.config.detectedPsp ||\n        this.config.tabPsps.get(this.config.currentTabId)\n      : null;\n    sendResponse({ psp });\n  }\n\n  /**\n   * Handle tab activation\n   * @private\n   * @param {{ tabId: number }} activeInfo - Tab activation info\n   * @return {Promise<void>}\n   */\n  async handleTabActivation(activeInfo: { tabId: number }): Promise<void> {\n    this.config.currentTabId = activeInfo.tabId;\n    this.config.detectedPsp = this.config.tabPsps.get(activeInfo.tabId) || null;\n    try {\n      const tab = await chrome.tabs.get(activeInfo.tabId);\n      if (this.config.detectedPsp) {\n        this.updateIcon(this.config.detectedPsp);\n      } else {\n        this.resetIcon();\n        if (tab?.url && this.config.exemptDomainsRegex?.test(tab.url)) {\n          await this.injectContentScript(activeInfo.tabId);\n        }\n      }\n    } catch (error) {\n      logger.warn(\"Tab access error:\", error);\n      this.resetIcon();\n    }\n  }\n\n  /**\n   * Handle tab updates\n   * @private\n   * @param {number} tabId - Tab ID\n   * @param {{ status?: string }} changeInfo - Change info\n   * @param {chrome.tabs.Tab} tab - Tab object\n   * @return {void}\n   */\n  handleTabUpdate(\n    tabId: number,\n    changeInfo: { status?: string },\n    tab: chrome.tabs.Tab,\n  ): void {\n    if (changeInfo.status === \"loading\") {\n      this.resetIcon();\n      this.config.tabPsps.delete(tabId);\n    }\n    if (\n      changeInfo.status === \"complete\" &&\n      tab.url &&\n      this.config.exemptDomainsRegex?.test(tab.url)\n    ) {\n      this.injectContentScript(tabId);\n    }\n  }\n\n  /**\n   * Update extension icon\n   * @private\n   * @param {string} psp - PSP name\n   * @return {void}\n   */\n  updateIcon(psp: string): void {\n    const pspInfo = this.getPspInfo(psp);\n    if (pspInfo) {\n      chrome.action.setIcon({\n        path: {\n          16: `images/${pspInfo.image}_16.png`,\n          48: `images/${pspInfo.image}_48.png`,\n          128: `images/${pspInfo.image}_128.png`,\n        },\n      });\n    }\n  }\n\n  /**\n   * Reset extension icon to default\n   * @private\n   * @return {void}\n   */\n  resetIcon(): void {\n    chrome.action.setIcon({\n      path: this.defaultIcons,\n    });\n  }\n\n  /**\n   * Get PSP information from config\n   * @private\n   * @param {string} psp - PSP name\n   * @return {PSP|null} PSP info or null\n   */\n  getPspInfo(psp: string): PSP | null {\n    if (!this.config.cachedPspConfig?.psps) return null;\n    return (\n      this.config.cachedPspConfig.psps.find(\n        (p: { name: string }) => p.name === psp,\n      ) || null\n    );\n  }\n\n  /**\n   * Inject content script into tab\n   * @private\n   * @param {number} tabId - Tab ID\n   * @return {Promise<void>}\n   */\n  async injectContentScript(tabId: number): Promise<void> {\n    try {\n      await chrome.scripting.executeScript({\n        target: { tabId },\n        files: [\"content.js\"],\n      });\n    } catch (error) {\n      logger.error(`Failed to inject content script into tab ${tabId}:`, error);\n    }\n  }\n}\n\n// Initialize background service\nnew BackgroundService();\n"],
  "mappings": "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",
  "names": ["logger", "message", "args", "BackgroundService", "message", "sender", "sendResponse", "activeInfo", "tabId", "changeInfo", "tab", "data", "domainPattern", "error", "logger", "response", "psp", "pspInfo", "p"]
}
